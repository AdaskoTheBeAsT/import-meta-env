import{_ as e,c as n,o as a,a as s}from"./app.4c54afb2.js";const k='{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":3,"title":"The .env.example.public File","slug":"the-env-example-public-file"},{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Using Environment Variables","slug":"using-environment-variables"},{"level":2,"title":"Extra Topics","slug":"extra-topics"},{"level":3,"title":".env file","slug":"env-file"},{"level":3,"title":".env.example file","slug":"env-example-file"},{"level":3,"title":"process.env","slug":"process-env"},{"level":3,"title":"IntelliSense for TypeScript","slug":"intellisense-for-typescript"},{"level":2,"title":"Framework-specific Notes","slug":"framework-specific-notes"},{"level":3,"title":"Vite","slug":"vite"},{"level":2,"title":"FAQ","slug":"faq"},{"level":3,"title":"Why use ImportMeta?","slug":"why-use-importmeta"},{"level":3,"title":"Boolean Values","slug":"boolean-values"},{"level":3,"title":"Changes to .env file is not updated","slug":"changes-to-env-file-is-not-updated"},{"level":3,"title":"Can I have multiple .env files?","slug":"can-i-have-multiple-env-files"},{"level":3,"title":"Should I commit my .env file?","slug":"should-i-commit-my-env-file"}],"relativePath":"guide.md"}',t={},o=s(`<h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p><a href="https://github.com/iendeavor/import-meta-env/blob/main/LICENSE" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/github/license/iendeavor/import-meta-env?color=blue&amp;label=License" alt=""></a><span>\xA0</span><a href="https://semver.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/Sem%20Ver-2.0.0-black.svg" alt=""></a><span>\xA0</span><a href="https://github.com/iendeavor/import-meta-env/actions/workflows/ci.yml" target="_blank" rel="noopener noreferrer"><img src="https://github.com/iendeavor/import-meta-env/actions/workflows/ci.yml/badge.svg" alt=""></a></p><p><a href="https://www.npmjs.com/package/@import-meta-env/babel" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/babel.svg?label=%40import-meta-env/babel" alt=""></a><span>\xA0</span><a href="https://www.npmjs.com/package/@import-meta-env/cli" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/cli.svg?label=%40import-meta-env/cli" alt=""></a><span>\xA0</span><a href="https://www.npmjs.com/package/@import-meta-env/unplugin" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/unplugin.svg?label=%40import-meta-env/unplugin" alt=""></a></p><h3 id="the-env-example-public-file" tabindex="-1">The <code>.env.example.public</code> File <a class="header-anchor" href="#the-env-example-public-file" aria-hidden="true">#</a></h3><p>First, for security reasons, we need to explicitly define which environment variables should be exposed to the browser.</p><p>You can do this by creating a <code>.env.example.public</code> file in your project:</p><div class="language-ini"><pre><code><span class="token key attr-name">S3_BUCKET</span><span class="token punctuation">=</span>
</code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>If you&#39;re building a server-rendered website, you may want to access sensitive (server-side only) environment variables, in which case you should use <a href="#process-env">process.<wbr>env</a>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">S3_BUCKET</span> <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">S3_BUCKET</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">SECRET_KEY</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SECRET_KEY</span><span class="token punctuation">;</span>
</code></pre></div></div><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h3><ol><li><p>Choose a transformation plugin:</p><ul><li>If you&#39;re already using Babel, you can install <a href="#install-babel-plugin">babel plugin</a>.</li><li>If you&#39;re already using Rollup, Vite, or Webpack, you can install <a href="#install-unplugin">unplugin</a>.</li></ul></li><li><p>You will also need to install the <a href="#install-cli">CLI</a> to populate your environment variables after production.</p></li></ol><h4 id="install-babel-plugin" tabindex="-1">Install Babel Plugin <a class="header-anchor" href="#install-babel-plugin" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/babel" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/babel.svg" alt=""></a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This Babel plugin is not compatible with the Vite, you should use the <a href="#install-unplugin">Unplugin</a> instead.</p></div><p>Install it with your favorite package manager:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @import-meta-env/babel
</code></pre></div><p>Specify the plugin:</p><div class="language-json"><pre><code><span class="token comment">// babel.config.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&quot;module:@import-meta-env/babel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;example&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.env.example.public&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/babel-starter-example" target="_blank" rel="noopener noreferrer">babel</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/webpack-babel-loader-example" target="_blank" rel="noopener noreferrer">babel-loader</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/jest-example" target="_blank" rel="noopener noreferrer">jest</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/rollup-plugin-babel-example" target="_blank" rel="noopener noreferrer">rollup-plugin-babel</a></p><h4 id="install-unplugin" tabindex="-1">Install Unplugin <a class="header-anchor" href="#install-unplugin" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/unplugin" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/unplugin.svg" alt=""></a></p><p>Install it with your favorite package manager:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @import-meta-env/unplugin
</code></pre></div><p>Rollup:</p><div class="language-js"><pre><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> ImportMetaEnvPlugin <span class="token keyword">from</span> <span class="token string">&quot;@import-meta-env/unplugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    ImportMetaEnvPlugin<span class="token punctuation">.</span><span class="token function">rollup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token string">&quot;.env.example.public&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Vite:</p><div class="language-ts"><pre><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> ImportMetaEnvPlugin <span class="token keyword">from</span> <span class="token string">&quot;@import-meta-env/unplugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    ImportMetaEnvPlugin<span class="token punctuation">.</span><span class="token function">vite</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      example<span class="token operator">:</span> <span class="token string">&quot;.env.example.public&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Webpack:</p><div class="language-js"><pre><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@import-meta-env/unplugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token string">&quot;.env.example.public&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/rollup-starter-example" target="_blank" rel="noopener noreferrer">rollup</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/vite-starter-example" target="_blank" rel="noopener noreferrer">vite</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/webpack-starter-example" target="_blank" rel="noopener noreferrer">webpack</a></p><h4 id="install-cli" tabindex="-1">Install CLI <a class="header-anchor" href="#install-cli" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/cli" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/cli.svg" alt=""></a></p><p>Install it with your favorite package manager:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @import-meta-env/cli
</code></pre></div><h3 id="using-environment-variables" tabindex="-1">Using Environment Variables <a class="header-anchor" href="#using-environment-variables" aria-hidden="true">#</a></h3><p>Suppose you have the following environment variables:</p><div class="language-bash"><pre><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">S3_BUCKET</span><span class="token operator">=</span>YOURS3BUCKET
</code></pre></div><p>You can access the environment variables in code like:</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">S3_BUCKET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In development, <code>import.<wbr>meta.env</code> will be statically replaced with the environment variables.</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;YOURS3BUCKET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>During production, <code>import.<wbr>meta.env</code> will be statically replaced with a placeholder string.</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;__import_meta_env_placeholder__&#39;</span><span class="token punctuation">.</span><span class="token constant">S3_BUCKET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Therefore, before serving your production build, you need to run the CLI to populate the environment variables:</p><div class="language-bash"><pre><code>./node_modules/.bin/import-meta-env --example .env.example.public
</code></pre></div><p>and it will output:</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;S3_BUCKET&quot;</span><span class="token operator">:</span><span class="token string">&quot;YOURS3BUCKET&quot;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token constant">S3_BUCKET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Since you may deploy your application to devices that don&#39;t have Node.js installed (for example, an Alpine Linux nginx image), in this case you&#39;ll need to use <a href="https://github.com/vercel/pkg" target="_blank" rel="noopener noreferrer">pkg</a> to package the <code>import-meta-env</code> script into a runnable executable:</p><div class="language-bash"><pre><code>npx pkg ./node_modules/@import-meta-env/cli/bin/import-meta-env.js --target node16-alpine --output import-meta-env-alpine
</code></pre></div><p>and use it as usual to populate environment variables:</p><div class="language-bash"><pre><code>./import-meta-env-alpine --example .env.example.public
</code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/docker-starter-example" target="_blank" rel="noopener noreferrer">docker</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It will also replace <code>import.<wbr>meta.env</code> appearing in JavaScript strings. Therefore, you may see errors like <code>Uncaught SyntaxError</code>, e.g. <code>&quot;import.<wbr>meta.env&quot;</code> will be transformed into <code>&quot;({&quot;S3_BUCKET&quot;:&quot;YOURS3BUCKET&quot;})&quot;</code>. To avoid this, you can break the string up with a unicode zero-width space, e.g. <code>import.<wbr>meta\\u200b.env</code>.</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>By default, <strong>import-meta-env</strong> will automatically determine the mode (development or production) and replace <code>import.<wbr>meta.env</code> with environment variables or placeholders, respectively.</p><p>You can override this by setting the <code>shouldInlineEnv</code> option for the <a href="#install-babel-plugin">babel plugin</a> and the <a href="#install-unplugin">unplugin</a>.</p><p>For more information, see <a href="./api.html">API</a>.</p></div><h2 id="extra-topics" tabindex="-1">Extra Topics <a class="header-anchor" href="#extra-topics" aria-hidden="true">#</a></h2><h3 id="env-file" tabindex="-1">.env file <a class="header-anchor" href="#env-file" aria-hidden="true">#</a></h3><p>In local development, for convenience, you can also create a <code>.env</code> (default value) file in the project instead of manipulating environment variables in the system:</p><div class="language-ini"><pre><code><span class="token comment"># Import-meta-env will only load \`S3_BUCKET\`&#39;s value</span>
<span class="token comment"># because we only defined it in the \`.env.example.public\` file.</span>
<span class="token key attr-name">S3_BUCKET</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">YOURS3BUCKET</span>&quot;</span>
<span class="token key attr-name">SECRET_KEY</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">YOURSECRETKEYGOESHERE</span>&quot;</span>
</code></pre></div><h3 id="env-example-file" tabindex="-1">.env.example file <a class="header-anchor" href="#env-example-file" aria-hidden="true">#</a></h3><p>A separate <code>.env.example</code> file is usually created, which defines all required environment variables, either provided by users for their own development environment, or communicated elsewhere with project collaborators.</p><p><strong>.env.example</strong></p><div class="language-ini"><pre><code><span class="token key attr-name">S3_BUCKET</span><span class="token punctuation">=</span>
<span class="token key attr-name">SECRET_KEY</span><span class="token punctuation">=</span>
</code></pre></div><h3 id="process-env" tabindex="-1"><code>process.<wbr>env</code> <a class="header-anchor" href="#process-env" aria-hidden="true">#</a></h3><p>For server-side only environment variables (credentials) you should use <a href="https://webpack.js.org/plugins/environment-plugin/" target="_blank" rel="noopener noreferrer">EnvironmentPlugin</a> or similar:</p><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;SECRET_KEY&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;YOURSECRETKEYGOESHERE&quot;</span>
</code></pre></div><p>If you need to populate server-side environment variables (i.e., <code>process.<wbr>env</code>) at run-time:</p><ol><li>For <a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">NEXT.js</a>, you can use <a href="https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration" target="_blank" rel="noopener noreferrer">serverRuntimeConfig</a>.</li><li>For <a href="https://nuxtjs.org/" target="_blank" rel="noopener noreferrer">NuxtJS</a>, you can use <a href="https://nuxtjs.org/docs/configuration-glossary/configuration-runtime-config" target="_blank" rel="noopener noreferrer">privateRuntimeConfig</a>.</li></ol><h3 id="intellisense-for-typescript" tabindex="-1">IntelliSense for TypeScript <a class="header-anchor" href="#intellisense-for-typescript" aria-hidden="true">#</a></h3><p>You may want to get TypeScript IntelliSense for user-defined environment variables.</p><p>To achieve, you can create an <code>env.d.ts</code>, then define <code>ImportMeta</code> like this:</p><div class="language-ts"><pre><code><span class="token comment">// env.d.ts</span>
<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> env<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token constant">S3_BUCKET</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="framework-specific-notes" tabindex="-1">Framework-specific Notes <a class="header-anchor" href="#framework-specific-notes" aria-hidden="true">#</a></h2><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h3><br><h4 id="the-env-variables-and-modes" tabindex="-1">The <a href="https://vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noopener noreferrer">Env Variables and Modes</a> <a class="header-anchor" href="#the-env-variables-and-modes" aria-hidden="true">#</a></h4><p>During production, the following variables will be statically replaced just like Vite:</p><ul><li><p><a href="https://vitejs.dev/guide/env-and-mode.html#env-variables" target="_blank" rel="noopener noreferrer">Built-in</a> variables: <code>MODE</code>, <code>BASE_URL</code>, <code>PROD</code>, and <code>DEV</code>.</p></li><li><p><a href="https://vitejs.dev/guide/ssr.html#conditional-logic" target="_blank" rel="noopener noreferrer">Server-side rendering</a> variable: <code>SSR</code>.</p></li><li><p><a href="https://vitejs.dev/plugins/#vitejs-plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a> variable: <code>LEGACY</code>.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Other environment variables still need to be populated via the <a href="#install-cli">CLI</a>, you can assume the <a href="https://vitejs.dev/config/index.html#envprefix" target="_blank" rel="noopener noreferrer"><code>envPrefix</code></a> option is set to <code>[]</code> internally.</p></div><h4 id="intellisense-for-typescript-1" tabindex="-1">IntelliSense for TypeScript <a class="header-anchor" href="#intellisense-for-typescript-1" aria-hidden="true">#</a></h4><p>For Vite projects, you can augment <a href="https://vitejs.dev/guide/env-and-mode.html#intellisense-for-typescript" target="_blank" rel="noopener noreferrer">ImportMetaEnv</a> like this:</p><div class="language-ts"><pre><code><span class="token comment">// src/env.d.ts</span>
<span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token constant">S3_BUCKET</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// more env variables...</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> env<span class="token operator">:</span> ImportMetaEnv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-hidden="true">#</a></h2><h3 id="why-use-importmeta" tabindex="-1">Why use ImportMeta? <a class="header-anchor" href="#why-use-importmeta" aria-hidden="true">#</a></h3><p>Since <code>process.<wbr>env</code> is a Node specific object, we should not use it in browser environment.</p><p>For server-side rendering, it is also more precise to use <code>import.<wbr>meta.env</code> (heavily inspired by Vite) and <code>process.<wbr>env</code> respectively.</p><h3 id="boolean-values" tabindex="-1">Boolean Values <a class="header-anchor" href="#boolean-values" aria-hidden="true">#</a></h3><p>Environment variables are always strings.</p><div class="language-bash"><pre><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>whatever <span class="token comment"># true</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span> <span class="token comment"># false</span>
</code></pre></div><p>The easiest way to do this is to treat <code>&quot;&quot;</code> and <code>undefined</code> (also known as falsy values) as <code>false</code>, otherwise treat them as <code>true</code>:</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;DEBUG is anything but the empty string and undefined.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;DEBUG is the empty string.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If you need to convert it to <code>boolean</code> type:</p><div class="language-diff"><pre><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> if (  import.<wbr>meta.env.DEBUG) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (!!import.<wbr>meta.env.DEBUG === true) {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> console.log(&quot;DEBUG is anything but the empty string and undefined.&quot;);
</span></span>} else {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> console.log(&quot;DEBUG is the empty string.&quot;);
</span></span>}
</code></pre></div><h3 id="changes-to-env-file-is-not-updated" tabindex="-1">Changes to .env file is not updated <a class="header-anchor" href="#changes-to-env-file-is-not-updated" aria-hidden="true">#</a></h3><p>In dev server, since we sometimes need to host multiple servers at the same time, you will need to restart your dev server after changing the environment variables.</p><p>In production, you can run <code>import-meta-env</code> multiple times (unless <code>disposable</code> flag is set to <code>true</code>) ) to re-populate different environment variables without rebuild your application.</p><h3 id="can-i-have-multiple-env-files" tabindex="-1">Can I have multiple .env files? <a class="header-anchor" href="#can-i-have-multiple-env-files" aria-hidden="true">#</a></h3><p>Yes. You can choose which one to be used by passing the <code>env</code> option to <code>import-meta-env</code>:</p><div class="language-bash"><pre><code>./node_modules/.bin/import-meta-env --env .env.development --example .env.example.public
</code></pre></div><p>Your config should vary between deployments, and you shouldn&#39;t share values between environments, so it only loads one .env file at a time.</p><h3 id="should-i-commit-my-env-file" tabindex="-1">Should I commit my .env file? <a class="header-anchor" href="#should-i-commit-my-env-file" aria-hidden="true">#</a></h3><p>No. We strongly recommend against committing your <code>.env</code> file to version control.</p>`,101),p=[o];function l(i,r,c,u,d,m){return a(),n("div",null,p)}var h=e(t,[["render",l]]);export{k as __pageData,h as default};
