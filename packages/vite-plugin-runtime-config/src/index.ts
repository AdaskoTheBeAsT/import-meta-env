import { Plugin, ResolvedConfig } from "vite";
import chalk from "chalk";
import path from "path";

const createPlugin: () => Plugin = () => {
  const name = "runtime-config";

  const uniqueId = Array(10)
    .fill(null)
    .map(() =>
      Math.random()
        .toString(36)
        .replace(/[^a-z]/g, "")
    )
    .join("");

  let config: ResolvedConfig;
  const legacyFileNames: string[] = [];
  return <Plugin>{
    name,
    configResolved(_config) {
      config = _config;
    },
    resolveId(id) {
      if (id === ".env") {
        return id;
      }
    },
    load(id) {
      if (config.command === "serve") {
        if (id === "/" + ".env") {
          const result = `export default ${JSON.stringify(config.env)}`;
          return result;
        }
      } else {
        if (id === ".env") {
          this.emitFile({
            type: "asset",
            fileName: `${config.build.assetsDir}/.env.js`,
            source: [
              `// Generated by runtime config, you could swap this file to change env.`,
              `// https://vitejs.dev/guide/env-and-mode.html#env-files`,
              `export default ${JSON.stringify(config.env)}`,
            ].join("\n"),
          });

          return [`export default ${uniqueId}`].join("\n");
        }
      }
    },
    renderChunk(code, chunk) {
      if (chunk.fileName.includes("-legacy")) {
        if (code.includes(uniqueId)) {
          legacyFileNames.push(chunk.fileName);
        }
      } else {
        if (code.includes(uniqueId)) {
          return `import ${uniqueId} from './.env.js';` + code;
        }

        if (chunk.name === ".env") {
          return [
            `import env from ${JSON.stringify("./.env.js")};`,
            `export default env`,
          ].join("\n");
        }
      }

      return undefined;
    },
    closeBundle() {
      if (legacyFileNames.length) {
        config.logger.warn(
          chalk.yellow(
            `\n[vite-plugin-runtime-config] doesn't support legacy now.`
          )
        );
        config.logger.warn(
          chalk.yellow(
            `Please manually replace '${uniqueId}' with your .env in following files:`
          )
        );
        config.logger.warn(
          legacyFileNames
            .map(
              (fileName) =>
                chalk.gray(
                  chalk.white.dim(
                    path.relative(config.root, config.build.outDir) + path.sep
                  )
                ) + chalk.cyan(path.join(fileName))
            )
            .join("\n")
        );
        config.logger.warn("");
      }
    },
  };
};

export default createPlugin;
